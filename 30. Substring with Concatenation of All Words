You are given a string, s, and a list of words, words, that are all of the same length. Find all starting indices of substring(s) in s that is a concatenation of each word in words exactly once and without any intervening characters.

 

Example 1:

Input:
  s = "barfoothefoobarman",
  words = ["foo","bar"]
Output: [0,9]
Explanation: Substrings starting at index 0 and 9 are "barfoo" and "foobar" respectively.
The output order does not matter, returning [9,0] is fine too.
Example 2:

Input:
  s = "wordgoodgoodgoodbestword",
  words = ["word","good","best","word"]
Output: []
--------------------------------------------------------------------------------------------------------------\
from collections import Counter
class Solution:
    def findSubstring(self, s: str, words: List[str]) -> List[int]:
        ans = []
        if not s or not words:
            return ans
        word_len = len(words[0])
        str_len = len(words)*word_len
        d = Counter(words)
        for i in range(len(s)-str_len+1):
            word_used = []
            for j in range(i, i+str_len, word_len):
                su = s[j:j+word_len]
                word_used.append(su)
            h2 = Counter(word_used)
            if h2 == d:
                ans.append(i)
        return ans
